import React, { useState } from 'react';

const ReportGenerator = ({ onReportGenerate }) => {
  const [isGenerating, setIsGenerating] = useState(false);

  const generateDailyReport = async () => {
    setIsGenerating(true);
    
    try {
      // Fetch data from the combined API
      const response = await fetch('http://127.0.0.1:5000/api/export-exception-data');

      if (!response.ok) {
        throw new Error('Failed to fetch data from the API');
      }

      // Get the text data directly
      const reportContent = await response.text();

      // Create and download the Word document
      downloadWordDocument(reportContent);
      
      // Call the original onReportGenerate if provided
      if (onReportGenerate) {
        onReportGenerate();
      }
      
    } catch (error) {
      console.error('Error generating report:', error);
      alert('Failed to generate report. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  const downloadWordDocument = (content) => {
    // Create HTML content for Word document
    const reportDate = new Date().toLocaleDateString();
    const currentTime = new Date().toLocaleTimeString();
    
    const htmlContent = `
      <html xmlns:o='urn:schemas-microsoft-com:office:office' xmlns:w='urn:schemas-microsoft-com:office:word' xmlns='http://www.w3.org/TR/REC-html40'>
      <head>
        <meta charset='utf-8'>
        <title>EFRAME Daily Report</title>
        <!--[if gte mso 9]>
        <xml>
          <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotPromptForConvert/>
            <w:DoNotShowRevisions/>
            <w:DoNotPrintRevisions/>
            <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
            <w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
            <w:UseMarginsForDrawingGridOrigin/>
            <w:ValidateAgainstSchemas/>
            <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
            <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
            <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
            <w:Compatibility>
              <w:BreakWrappedTables/>
              <w:SnapToGridInCell/>
              <w:WrapTextWithPunct/>
              <w:UseAsianBreakRules/>
              <w:DontGrowAutofit/>
            </w:Compatibility>
            <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
          </w:WordDocument>
        </xml>
        <![endif]-->
        <style>
          body {
            font-family: 'Calibri', 'Arial', sans-serif;
            font-size: 11pt;
            line-height: 1.4;
            margin: 1in;
            color: #333;
          }
          h1 {
            text-align: center;
            font-size: 20pt;
            font-weight: bold;
            margin-bottom: 20px;
            color: #2c3e50;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
          }
          h2 {
            font-size: 14pt;
            font-weight: bold;
            margin-top: 25px;
            margin-bottom: 15px;
            color: #34495e;
            border-left: 4px solid #3498db;
            padding-left: 10px;
            background-color: #f8f9fa;
            padding: 8px 10px;
          }
          .header {
            text-align: center;
            font-weight: bold;
            margin-bottom: 25px;
            color: #7f8c8d;
            font-size: 12pt;
          }
          .separator {
            text-align: center;
            margin: 25px 0;
            color: #bdc3c7;
            font-size: 10pt;
          }
          .footer {
            text-align: center;
            margin-top: 40px;
            color: #7f8c8d;
            font-style: italic;
            font-size: 10pt;
            border-top: 1px solid #ecf0f1;
            padding-top: 15px;
          }
          p {
            margin: 8px 0;
            text-align: justify;
          }
          .data-row {
            padding: 5px 0;
            border-bottom: 1px solid #ecf0f1;
          }
          .data-row:hover {
            background-color: #f8f9fa;
          }
          .highlight {
            background-color: #e8f4fd;
            padding: 2px 5px;
            border-radius: 3px;
          }
        </style>
      </head>
      <body>
        <h1>EFRAME DASHBOARD - DAILY REPORT</h1>
        <div class="header">Generated on: ${reportDate} at ${currentTime}</div>
        <div class="separator">${'='.repeat(60)}</div>
        
        ${formatContentForWord(content)}
        
        <div class="separator">${'='.repeat(60)}</div>
        <div class="footer">Report generated by EFRAME Dashboard System</div>
      </body>
      </html>
    `;

    // Create blob and download
    const blob = new Blob([htmlContent], { 
      type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' 
    });
    const currentDate = new Date().toISOString().split('T')[0];
    const fileName = `eframe-daily-report-${currentDate}.doc`;
    
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = fileName;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
  };

  const formatContentForWord = (content) => {
    // Split content into sections
    const sections = content.split('\n\n');
    let formattedContent = '';
    
    sections.forEach(section => {
      if (section.trim()) {
        const lines = section.split('\n');
        
        // Check if this is a section header
        if (lines[0] && lines[0].includes(':')) {
          // This is a section header
          formattedContent += `<h2>${lines[0]}</h2>`;
          
          // Add the rest of the lines as regular paragraphs
          for (let i = 1; i < lines.length; i++) {
            if (lines[i].trim()) {
              // Check if line contains data with colons (key-value pairs)
              if (lines[i].includes(':')) {
                const [key, value] = lines[i].split(':');
                formattedContent += `<div class="data-row"><strong>${key}:</strong> <span class="highlight">${value}</span></div>`;
              } else {
                formattedContent += `<p>${lines[i]}</p>`;
              }
            }
          }
        } else {
          // Regular content
          lines.forEach(line => {
            if (line.trim()) {
              if (line.includes(':')) {
                const [key, value] = line.split(':');
                formattedContent += `<div class="data-row"><strong>${key}:</strong> <span class="highlight">${value}</span></div>`;
              } else {
                formattedContent += `<p>${line}</p>`;
              }
            }
          });
        }
      }
    });
    
    return formattedContent;
  };

  return (
    <button
      className={`px-5 py-2 rounded-lg font-semibold shadow btn btn-start focus:outline-none focus:ring-2 focus:ring-blue-400 ${
        isGenerating 
          ? 'bg-gray-400 cursor-not-allowed' 
          : 'bg-blue-600 hover:bg-blue-700 text-white'
      }`}
      onClick={generateDailyReport}
      disabled={isGenerating}
    >
      {isGenerating ? (
        <>
          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
          Generating Word Report...
        </>
      ) : (
        'Generate Word Report'
      )}
    </button>
  );
};

export default ReportGenerator; 